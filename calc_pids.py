#!/usr/bin/python3
import sys


allpids = [
    ('HV_AMPS', 'vab'),
    ('MGB_AMPS', 'vab'),
    ('HV_VOLTS', 'vab'),
    ('MGB_VOLTS', 'vab'),
    ('MGA_AMPS', 'vab'),
    ('EV_RANGE_REM', 'vab'),
    ('MGA_VOLTS', 'vab'),
    ('BATTERY_SOC', 'va'),
    ('BATTERY_RAW_SOC', 'va'),
    ('INTAKE_TEMP', 'va'),
    ('COOLANT_TEMP','va'),
    ('BATTERY_TEMP','va'),
    #('AIR_TEMP', 'va'),
    ('TROUBLECODE_QUERY', ''),
    ('AIR_PRESSURE', 'va'),
]

disabled = [
    ('EV_KM', 'vab'),
    ('ENGINE_RPM', 'vab / 4'),
    ('INTAKE_AIR_FLOW', 'vab'),
    ('TIME_SINCE_START', 'vab'),
    ('DIST_SINCE_CLEAR', 'vab'),
    ('ENGINE_LOAD', 'va'),
    ('MONITOR_STATUS', 'va'),
]

query_tree = [
    'HV_AMPS',
    'MGB_AMPS',
    'MGA_AMPS',
    [
        'HV_VOLTS',
        [
            'EV_RANGE_REM',
            [
                'BATTERY_SOC',
                'BATTERY_RAW_SOC',
            ],
            [
                'AIR_PRESSURE',
                'TROUBLECODE_QUERY'
            ],
        ]
    ],
    [
        'MGB_VOLTS',
        [
            'MGA_VOLTS',
            [
                'INTAKE_TEMP',
                'COOLANT_TEMP'
            ],
            'BATTERY_TEMP',
        ]
    ]
]

def flatten_query_tree(node):
    if isinstance(node, str):
        return [node]

    rlist = []
    flatlist = [flatten_query_tree(subnode) for subnode in node]
    maxlen = max(map(len, flatlist))
    for j in range(maxlen):
        for sublist in flatlist:
            rlist.append(sublist[j % len(sublist)])
    return rlist

pid_cycles = flatten_query_tree(query_tree)

counts = {}
indexes = {}
for p in pid_cycles:
    if p not in indexes:
        indexes[p] = len(indexes)
    counts[p] = counts.get(p, 0) + 1

for i, (k, v) in enumerate(sorted(counts.items(), key=lambda v:-v[1])):
    print('%-20s: %.1f' % (k, v * 62.5 / len(pid_cycles)))

with open('obd2_query_sequence.h', 'w') as fp:
    print('// generated by calc_pids.py', file=fp)
    print('const uint32_t obd2_query_sequence[] = {', file=fp)
    for i, j in enumerate(pid_cycles):
        print('    %-30s // %2d%s' % (('PID_' + j if j else '0xFFFF') + ',', i, (' ' + '    ' * indexes[j] + 'X') if j else ''), file=fp)
    print('    0\n};\n', file=fp)

    print('const uint32_t obd2_query_sequence_low[] = {', file=fp)
    for i, (name, valcode) in enumerate(allpids):
        print('    %-30s // %2d' % (('PID_' + name) + ',', i), file=fp)
    print('    0\n};', file=fp)


with open('obd2_switch.h', 'w') as fp:
    print('// generated by calc_pids.py', file=fp)
    for name, valcode in allpids:
        if not valcode:
            continue;
        print('        case PID_%s & 0xFFFF:' % name, file=fp)
        print('            cd.%s = %s;' % (name.lower(), valcode), file=fp)
        print('            break;', file=fp)
